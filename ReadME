The primary issue is that your entire markdown is wrapped in a code fence (using triple backticks with "markdown"), so GitHub treats it as literal code instead of rendering it. In a GitHub README, you typically want the markdown to render as formatted text, not as a code snippet.

Here are some steps and tips to improve the appearance:

1. **Remove the Code Fence**  
   Instead of enclosing your content in:
   ```markdown
   ```markdown
   ... your content ...
   ```
   ```
   simply remove the surrounding triple backticks. That way, GitHub will render the markdown as intended.

2. **Verify Your Table of Contents Links**  
   GitHub automatically generates header IDs by converting the text to lowercase, removing punctuation, and replacing spaces with dashes. For example, the header  
   `### Fork, Clone & Upstream Setup`  
   becomes something like `fork-clone--upstream-setup`. Make sure your links in the table of contents match these IDs. You can hover over a rendered header on GitHub to see its actual ID.

3. **Simplify Headings If Needed**  
   If you encounter problems with special characters (like commas or ampersands), consider simplifying your headings. For example, you might change  
   `Fork, Clone & Upstream Setup`  
   to  
   `Fork Clone and Upstream Setup`  
   so that the auto-generated ID is more predictable.

4. **Use HTML Anchors for Custom IDs (if necessary)**  
   If you need more control over the header IDs, you can add HTML anchor tags before your headings. For example:
   ```markdown
   <a name="fork-clone-setup"></a>
   ### Fork, Clone & Upstream Setup
   ```
   Then update your Table of Contents link accordingly.

---

**Revised Version (Without Code Fence):**

# Medscribe Repository â€“ Project Setup & Development

## Table of Contents

- [Project Setup Instructions](#project-setup-instructions)
  - [Fork, Clone & Upstream Setup](#fork-clone--upstream-setup)
  - [Create a Feature Branch](#create-a-feature-branch)
  - [Install Dependencies](#install-dependencies)
- [Development Server](#development-server)
- [Expected Backend Behavior](#expected-backend-behavior)
- [Code Quality & Formatting](#code-quality--formatting)
- [Git Workflow](#git-workflow)
- [Troubleshooting](#troubleshooting)

---

## Project Setup Instructions

### Fork, Clone & Upstream Setup

1. **Fork the Repository**  
   Click the **Fork** button on GitHub to create your own copy.

2. **Clone Your Fork**  
   ```bash
   git clone https://github.com/<YourUsername>/Medscribe.git
   ```

3. **Set Upstream**  
   Configure the original repository as upstream:
   ```bash
   git remote add upstream https://github.com/RisingAI-corp/Medscribe.git
   ```
   Verify the remote:
   ```bash
   git remote -v
   ```

### Create a Feature Branch

Always create a new branch for each feature or bug fix:
```bash
git checkout -b feature/your-feature-name
```

### Install Dependencies

- **Backend:** Run in the project root:
  ```bash
  go mod tidy
  ```
- **Frontend:** Navigate to the `MedscribeUI` directory and run:
  ```bash
  cd MedscribeUI && npm install
  ```

---

## Development Server

You have two options to start the development environment:

### Option 1: Run Both Servers Concurrently

From the project root, run:
```bash
npx concurrently "go run cmd/api/api.go" "cd MedscribeUI && npm run dev"
```
This command uses `concurrently` to start both the backend and frontend servers simultaneously.

### Option 2: Run Servers in Separate Terminals

1. **Start the Backend Server:**  
   Open one terminal in the project root and run:
   ```bash
   go run cmd/api/api.go
   ```

2. **Start the Frontend Server:**  
   Open another terminal, navigate to the `MedscribeUI` directory, and run:
   ```bash
   cd MedscribeUI && npm run dev
   ```

---

## Expected Backend Behavior

- The backend API serves data related to the Medscribe application.
- CORS issues may occur if the frontend's URL is not included in the backend's `AllowedOrigins` configuration.  
  *Check `api/routes/entry` to configure these settings.*

---

## Code Quality & Formatting

- **Backend Linting:**  
  Run:
  ```bash
  golangci-lint run
  ```
- **Frontend Linting:**  
  Navigate to the `MedscribeUI` directory and run:
  ```bash
  cd MedscribeUI && npx eslint --fix .
  ```

---

## Git Workflow

After making changes:

1. **Sync with Upstream**
   ```bash
   git pull upstream main --rebase
   ```

2. **Push Your Feature Branch**
   ```bash
   git push origin feature/your-feature-name
   ```

3. **Open a Pull Request**  
   Create a PR to merge your feature branch into the upstream `main` branch.

---

## Troubleshooting

- **Node.js Version Error:**  
  If you see errors like:
  ```
  @eslint/js@9.10.0: The engine "node" is incompatible with this module. Expected version "^18.18.0 || ^20.9.0 || >=21.1.0". Got "18.13.0".
  ```
  Upgrade your Node.js version to at least **18.18.0**.

- **CORS Issues:**  
  If you encounter CORS errors, ensure your frontend's URL is included in the `AllowedOrigins` configuration in `api/routes/entry`.

- **Dependency Issues:**  
  If you encounter dependency issues, run `go mod tidy` in the project root, and `npm install` in the `MedscribeUI` directory.

---

By making these adjustments, your markdown should render beautifully on GitHub.